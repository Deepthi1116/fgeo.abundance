{
    "data" : [
        "> ",
        "tibble_src_nm(file_dir) %>% filter(is_empty(src_nm))",
        "Error: object 'src_nm' not found\n",
        "> ",
        "tibble_src_nm(file_dir)",
        "# A tibble: 9 × 2\n            fun_nm\n             <chr>\n1        abundance\n2 abundanceperquad\n3    abundance.spp\n4       pop.change\n5   pop.change.dbh\n6               ba\n7            basum\n8 abund.manycensus\n9     character(0)\n# ... with 1 more variables: doc <chr>\n",
        "> ",
        "tibble_src_nm(file_dir) %>% filter(is_empty(fun_nm))",
        "# A tibble: 0 × 2\n# ... with 2 variables: fun_nm <chr>,\n#   doc <chr>\n",
        "> ",
        "tibble_src_nm(file_dir) %>% filter(!is_empty(fun_nm))",
        "# A tibble: 9 × 2\n            fun_nm\n             <chr>\n1        abundance\n2 abundanceperquad\n3    abundance.spp\n4       pop.change\n5   pop.change.dbh\n6               ba\n7            basum\n8 abund.manycensus\n9     character(0)\n# ... with 1 more variables: doc <chr>\n",
        "> ",
        "tibble_src_nm(file_dir) %>% filter(!grepl(\"character\\0\\)\"))",
        "Error: nul character not allowed (line 1)\n",
        "> ",
        "tibble_src_nm(file_dir) %>% filter(!NULL)",
        "Error: invalid argument type\n",
        "> ",
        "tibble_src_nm(file_dir) %>% filter(NULL)",
        "Error: incompatible expression in filter\n",
        "> ",
        "tibble_src_nm(file_dir)$fun_nm)",
        "Error: unexpected ')' in \"tibble_src_nm(file_dir)$fun_nm)\"\n",
        "> ",
        "tibble_src_nm(file_dir)$fun_nm",
        "[1] \"abundance\"        \"abundanceperquad\"\n[3] \"abundance.spp\"    \"pop.change\"      \n[5] \"pop.change.dbh\"   \"ba\"              \n[7] \"basum\"            \"abund.manycensus\"\n[9] \"character(0)\"    \n",
        "> ",
        "map(tibble_src_nm(file_dir)$fun_nm, typeof)",
        "[[1]]\n[1] \"character\"\n\n[[2]]\n[1] \"character\"\n\n[[3]]\n[1] \"character\"\n\n[[4]]\n[1] \"character\"\n\n[[5]]\n[1] \"character\"\n\n[[6]]\n[1] \"character\"\n\n[[7]]\n[1] \"character\"\n\n[[8]]\n[1] \"character\"\n\n[[9]]\n[1] \"character\"\n\n",
        "> ",
        "file_dir %>% ",
        "+ ",
        "    readr::read_file() %>% ",
        "+ ",
        "    str_replace_all(",
        "+ ",
        "      pattern = regex(\"(\\n\\')([^ ]+)(\\'\\n)\", multiline = F, dotall = F),",
        "+ ",
        "      replacement = \"\\\\1\\\\2\\\\3\\nxxxxx\\n\"",
        "+ ",
        "      ) %>% ",
        "+ ",
        "    str_split(\"xxxxx\") %>% ",
        "+ ",
        "    unlist() %>% ",
        "+ ",
        "    tibble() %>% ",
        "+ ",
        "    setNames(\"doc\")",
        "# A tibble: 9 × 1\n                                                    doc\n                                                  <chr>\n1 \\n#'\\n#'\\n\\n#' abundance\\n#'\\n#' @description\\n#'\\n#'\n2   \\n\\n#' abundanceperquad\\n#'\\n#' @description\\n#'\\n#\n3   \\n\\n#' abundance.spp\\n#'\\n#' @description\\n#'\\n#' A\n4   \\n\\n#' pop.change\\n#'\\n#' @description\\n#'\\n#' Find\n5   \\n\\n#' pop.change.dbh\\n#'\\n#' @description\\n#'\\n#' \n6   \\n\\n#' ba\\n#'\\n#' @description\\n#'\\n#' Calculates t\n7   \\n\\n#' basum\\n#'\\n#' @description\\n#'\\n#' Returns t",
        "\n8   \\n\\n#' abund.manycensus\\n#'\\n#' @description\\n#'\\n#\n9                                                    \\n\n",
        "> ",
        "file_dir %>% ",
        "+ ",
        "    readr::read_file() %>% ",
        "+ ",
        "    str_replace_all(",
        "+ ",
        "      pattern = regex(\"(\\n\\')([^ ]+)(\\'\\n)\", multiline = F, dotall = F),",
        "+ ",
        "      replacement = \"\\\\1\\\\2\\\\3\\nxxxxx\\n\"",
        "+ ",
        "      ) %>% ",
        "+ ",
        "    str_split(\"xxxxx\") %>% ",
        "+ ",
        "    unlist() %>% ",
        "+ ",
        "    tibble() %>% ",
        "+ ",
        "    setNames(\"doc\") %>% ",
        "+ ",
        "    filter(grepl(\".*[a-zA-Z]+.*\", doc))",
        "# A tibble: 8 × 1\n                                                    doc\n                                                  <chr>\n1 \\n#'\\n#'\\n\\n#' abundance\\n#'\\n#' @description\\n#'\\n#'\n2   \\n\\n#' abundanceperquad\\n#'\\n#' @description\\n#'\\n#\n3   \\n\\n#' abundance.spp\\n#'\\n#' @description\\n#'\\n#' A\n4   \\n\\n#' pop.change\\n#'\\n#' @description\\n#'\\n#' Find\n5   \\n\\n#' pop.change.dbh\\n#'\\n#' @description\\n#'\\n#' \n6   \\n\\n#' ba\\n#'\\n#' @description\\n#'\\n#' Calculates t\n7   \\n\\n#' basum\\n#'\\n#' @description\\n#'\\n#' Returns t",
        "\n8   \\n\\n#' abund.manycensus\\n#'\\n#' @description\\n#'\\n#\n",
        "> ",
        "tibble_doc <- function(file_dir) {",
        "+ ",
        "  file_dir %>% ",
        "+ ",
        "    readr::read_file() %>% ",
        "+ ",
        "    str_replace_all(",
        "+ ",
        "      pattern = regex(\"(\\n\\')([^ ]+)(\\'\\n)\", multiline = F, dotall = F),",
        "+ ",
        "      replacement = \"\\\\1\\\\2\\\\3\\nxxxxx\\n\"",
        "+ ",
        "      ) %>% ",
        "+ ",
        "    str_split(\"xxxxx\") %>% ",
        "+ ",
        "    unlist() %>% ",
        "+ ",
        "    tibble() %>% ",
        "+ ",
        "    setNames(\"doc\") %>% ",
        "+ ",
        "    # Remove empty rows",
        "+ ",
        "    filter(grepl(\".*[a-zA-Z]+.*\", doc))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "tibble_src_nm <- function(file_dir) {",
        "+ ",
        "  src_nm <- tibble_doc(file_dir) %>% ",
        "+ ",
        "    mutate(",
        "+ ",
        "      fun_nm = str_extract_all(",
        "+ ",
        "        doc, ",
        "+ ",
        "        pattern = regex(\".*(\\n\\')([^ ]+)(\\'\\n).*\", multiline = F, dotall = F)",
        "+ ",
        "        ),",
        "+ ",
        "      fun_nm = str_replace_all(fun_nm, fixed(\"#'\\n'\"), \"\"),",
        "+ ",
        "      fun_nm = str_replace_all(fun_nm, fixed(\"\\n'\"), \"\"),",
        "+ ",
        "      fun_nm = str_replace_all(fun_nm, fixed(\"'\\n\"), \"\")",
        "+ ",
        "      )",
        "+ ",
        "  dplyr::select(src_nm, 2, 1)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "file_dir <- \"./data-raw/tst_in/abundance.R\"",
        "> ",
        "tibble_src_nm(file_dir)",
        "# A tibble: 8 × 2\n            fun_nm\n             <chr>\n1        abundance\n2 abundanceperquad\n3    abundance.spp\n4       pop.change\n5   pop.change.dbh\n6               ba\n7            basum\n8 abund.manycensus\n# ... with 1 more variables: doc <chr>\n",
        "> ",
        "file_dir",
        "[1] \"./data-raw/tst_in/abundance.R\"\n",
        "> ",
        "path_in",
        "[[1]]\n[1] \"./data-raw/tst_in/abund.fit.CTFS.R\"\n\n[[2]]\n[1] \"./data-raw/tst_in/abundance.R\"\n\n",
        "> ",
        "path_in",
        "[[1]]\n[1] \"./data-raw/tst_in/abund.fit.CTFS.R\"\n\n[[2]]\n[1] \"./data-raw/tst_in/abundance.R\"\n\n",
        "> ",
        "map(path_in, tibble_src_nm)",
        "[[1]]\n# A tibble: 12 × 2\n                   fun_nm\n                    <chr>\n1     model.littleR.Gibbs\n2   full.abundmodel.llike\n3                 prob.N1\n4  spmean.mort.abundGibbs\n5        hyper.abundGibbs\n6         hyper.mortGibbs\n7     bad.asympower.param\n8       bad.asymexp.param\n9    fitSeveralAbundModel\n10       graph.abundmodel\n11        find.xaxis.hist\n12         abundmodel.fit\n# ... with 1 more variables: doc <chr>\n\n[[2]]\n# A tibble: 8 × 2\n            fun_nm\n             <chr>\n1        abundance\n2",
        " abundanceperquad\n3    abundance.spp\n4       pop.change\n5   pop.change.dbh\n6               ba\n7            basum\n8 abund.manycensus\n# ... with 1 more variables: doc <chr>\n\n",
        "> ",
        "path_in",
        "[[1]]\n[1] \"./data-raw/tst_in/abund.fit.CTFS.R\"\n\n[[2]]\n[1] \"./data-raw/tst_in/abundance.R\"\n\n\nRestarting R session...\n\n"
    ],
    "type" : [
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2
    ]
}