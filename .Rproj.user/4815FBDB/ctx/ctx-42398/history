library(tidyr)
base_in <- "./data-raw/tst_in/"
base_out <- "./data-raw/tst_out/"
path_in <- map2(base_in, dir(base_in), paste0)
path_out <- map2(base_out, dir(base_in), paste0)
tibble_doc <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_replace_all(
pattern = regex("(\n\')([^ ]+)(\'\n)", multiline = F, dotall = F),
replacement = "\\1\\2\\3\nxxxxx\n"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
tibble_fun_nm <- function(file_dir) {
src_nm <- tibble_doc(file_dir) %>%
mutate(
fun_nm = str_extract_all(
doc,
pattern = regex(".*(\n\')([^ ]+)(\'\n).*", multiline = F, dotall = F)
),
fun_nm = str_replace_all(fun_nm, fixed("#'\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("'\n"), "")
)
dplyr::select(src_nm, 2, 1)
}
file_dir <- "./data-raw/tst_in/biomass.CTFSdb.R"
tibble_src <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_extract_all(
stringr::regex(pattern = "<name>\r.*\n</name>",
multiline = FALSE,
dotall = TRUE
)
)
map(write_file, "./tst.R")
str_replace_all(
pattern = regex(
"(<name>.*<\\\\/name>).*(<source>.*<\\\\/source>)",
multiline = T,
dotall = T
),
replacement = "\\1\nxxxxxx\n\\2"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
map(path_in, tibble_fun_nm)
source('C:/Users/dora/Dropbox/git_repos/ctfs/data-raw/tst_try.R', echo=TRUE)
library(readr)
library(stringr)
library(purrr)
library(tibble)
library(dplyr)
library(tidyr)
base_in <- "./data-raw/tst_in/"
base_out <- "./data-raw/tst_out/"
path_in <- map2(base_in, dir(base_in), paste0)
path_out <- map2(base_out, dir(base_in), paste0)
tibble_doc <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_replace_all(
pattern = regex("(\n\')([^ ]+)(\'\n)", multiline = F, dotall = F),
replacement = "\\1\\2\\3\nxxxxx\n"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
tibble_fun_nm <- function(file_dir) {
src_nm <- tibble_doc(file_dir) %>%
mutate(
fun_nm = str_extract_all(
doc,
pattern = regex(".*(\n\')([^ ]+)(\'\n).*", multiline = F, dotall = F)
),
fun_nm = str_replace_all(fun_nm, fixed("#'\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("'\n"), "")
)
dplyr::select(src_nm, 2, 1)
}
file_dir <- "./data-raw/tst_in/biomass.CTFSdb.R"
tibble_src <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_extract_all(
stringr::regex(pattern = "<name>\r.*\n</name>",
multiline = FALSE,
dotall = TRUE
)
)
map(write_file, "./tst.R")
str_replace_all(
pattern = regex(
"(<name>.*<\\\\/name>).*(<source>.*<\\\\/source>)",
multiline = T,
dotall = T
),
replacement = "\\1\nxxxxxx\n\\2"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
map(path_in, tibble_fun_nm)
path_in
map(path_in, tibble_fun_nm) %>%
unlist()
tibble_fun_nm
map_chr(path_in, tibble_fun_nm)
map(path_in, tibble_fun_nm)
path_in
path_in
map(path_in, tibble_fun_nm)
map(path_in, tibble_fun_nm)
map_df(path_in, tibble_fun_nm)
map_df(path_in, tibble_fun_nm)
map_df(path_in, tibble_fun_nm)
map_df(path_in, tibble_fun_nm) %>% View
fun_code
# Plan devleopment --------------------------------------------------------
# Start with code + html-tagged-docs and roxygen documentation in separate files
# Code: Copy source files from a folder with subfolders to a single folder
# source("./data-raw/src2doc_src_to_dir.R")  # WARNING: DISSABLED ONCE RUN
# Roxygen documentation: From sourse files, wrangle to roxygenize documentation
# source("./data-raw/src2doc_html2roxygen.R")  # WARNING: DISSABLED ONCE RUN
# Outline ----
#   0. store the name of the file with many functions in a tibble's variable
#   1. store the roxygen docs of each function in a file in a tibble's variable
#   2. store the source of each function in a file in a tibble's variable
#   3. paste the doc and source of each function
#   4. for each file name, combine rows into a single text string
#   5. save each file with its corresponding docs and source of each function
# Packages ----------------------------------------------------------------
library(ctfs)
library(dplyr)
library(purrr)
library(readr)
library(stringr)
library(tibble)
# Work --------------------------------------------------------------------
# 0. tibble directories ----
# (file paths and names. Each file has multiple functions.)
# Check if file in one folder lack in the other. "ctfs-package.r" is ok.
code_from <- "./data-raw/ctfs_src_html/"
doc_from <- "./data-raw/ctfs_doc/"
diff_code_doc <- setdiff(dir(code_from), dir(doc_from))
if (!purrr::is_empty(diff_code_doc)) {
warning(
paste(
"File(s) in docs folder is not in code folder.",
"Difference is:",
deparse(diff_code_doc)
)
)
}
diff_doc_code <- setdiff(dir(doc_from), dir(code_from))
if (!purrr::is_empty(diff_doc_code)) {
warning(
paste(
"File(s) in docs folder is not in code folder.",
"Difference is:",
deparse(diff_doc_code)
)
)
}
dirs <- tibble(file_nm = intersect(dir(doc_from), dir(code_from))) %>%
mutate(
path_src = paste0(code_from, file_nm),
path_doc = paste0(doc_from, file_nm)
)
# Tibble fun names, source code and roxygen docs
# 1.1. tibble fun names and source code ----
codify <- function(fun) {
without_name <- paste0(deparse(get(fun)), collapse = "\n")
paste(fun, "<-", without_name)
}
fun_code <- tibble(fun_nm = ls(getNamespace("ctfs"), all.names=TRUE)) %>%
# Remove stuff that are not funtions (start with .)
filter(!grepl("^\\.", fun_nm)) %>%
mutate(fun_code = codify(fun_nm))
fun_code
fun_code$fun_nm
paste0(fun_code$fun_nm, collapse = "|)"
paste0(fun_code$fun_nm, collapse = "|")
fun_collapsed <- paste0(fun_code$fun_nm, collapse = "|")
fun_collapsed
str_extract_all(c("hi hh", "mauro"), pattern = "hi|mauro")
str_extract_all(c("hi hh", "mauro"), pattern = "hi")
map_df(path_in, tibble_fun_nm)
map_df(path_in, tibble_fun_nm)
library(readr)
library(stringr)
library(purrr)
library(tibble)
library(dplyr)
library(tidyr)
base_in <- "./data-raw/tst_in/"
base_out <- "./data-raw/tst_out/"
path_in <- map2(base_in, dir(base_in), paste0)
path_out <- map2(base_out, dir(base_in), paste0)
tibble_doc <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_replace_all(
pattern = regex("(\n\')([^ ]+)(\'\n)", multiline = F, dotall = F),
replacement = "\\1\\2\\3\nxxxxx\n"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
tibble_fun_nm <- function(file_dir) {
src_nm <- tibble_doc(file_dir) %>%
mutate(
fun_nm = str_extract_all(
doc,
pattern = regex(".*(\n\')([^ ]+)(\'\n).*", multiline = F, dotall = F)
),
fun_nm = str_replace_all(fun_nm, fixed("#'\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("'\n"), "")
)
dplyr::select(src_nm, 2, 1)
}
file_dir <- "./data-raw/tst_in/biomass.CTFSdb.R"
# code_from <- "./data-raw/ctfs_src_html/"
# doc_from <- "./data-raw/ctfs_doc/"
map_df(path_in, tibble_fun_nm)
map_df(path_in, tibble_fun_nm)
docs <- map_df(path_in, tibble_fun_nm)
docs <- map_df(path_in, tibble_fun_nm)
fun_collapsed <- paste0(fun_code$fun_nm, collapse = "|")
docs %>%
mutate(
fun_num2 = str_extract_all(fun_nm, pattern = fun_collapsed)
)
docs %>%
mutate(
fun_num2 = str_extract_all(fun_nm, pattern = fun_collapsed)
) %>%
select(funnm, fun_num2)
docs %>%
mutate(
fun_num2 = str_extract_all(fun_nm, pattern = fun_collapsed)
) %>%
select(funnm, fun_num2)
docs %>%
mutate(
fun_num2 = str_extract_all(fun_nm, pattern = fun_collapsed)
) %>%
select(fun_nm, fun_nm2)
docs <- map_df(path_in, tibble_fun_nm)
fun_collapsed <- paste0(fun_code$fun_nm, collapse = "|")
docs %>%
mutate(
fun_num2 = str_extract_all(fun_nm, pattern = fun_collapsed)
) %>%
select(fun_nm, fun_nm2)
select(fun_nm, fun_nm2)
docs %>%
mutate(
fun_nm2 = str_extract_all(fun_nm, pattern = fun_collapsed)
) %>%
select(fun_nm, fun_nm2)
str_extract_all(docs$fun_nm, pattern = fun_collapsed)
str_extract_all(docs, pattern = "hi") %>% tibble
source('C:/Users/dora/Dropbox/git_repos/ctfs/data-raw/tst_try.R', echo=TRUE)
docs
str_extract_all(docs$fun_nm, pattern = fun_collapsed)
docs$fun_nm
docs$fun_nm %>%
map(str_extract_all, fun_collapsed)
map_df(str_extract_all, fun_collapsed)
docs$fun_nm %>%
map_df(str_extract_all, fun_collapsed)
map_chr(str_extract_all, fun_collapsed)
source('C:/Users/dora/Dropbox/git_repos/ctfs/data-raw/tst_try.R', echo=TRUE)
docs$fun_nm %>%
map(str_extract_all, fun_collapsed)
docs$fun_nm
str_extract_all(docs$fun_nm, pattern = fun_collapsed)
str_extract_all(docs$fun_nm, pattern = fun_collapsed) %>%
unlist()
str_extract_all(docs$fun_nm, pattern = fun_collapsed) %>%
unlist()
extracted <- str_extract_all(docs$fun_nm, pattern = fun_collapsed) %>%
unlist()
tibble(fun_dirty = docs$fun_nm, fun_clean = extracted)
tibble(fun_dirty = docs$fun_nm, fun_clean = extracted) %>% View
fun_code$fun_nm
fun_code$fun_nm
map_df(path_in, tibble_fun_nm)
map_df(path_in, tibble_fun_nm)[[1]]
path_in
source('C:/Users/dora/Dropbox/git_repos/ctfs/data-raw/src2doc.R', echo=TRUE)
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
tibble_fun_nm <- function(file_dir) {
src_nm <- tibble_doc(file_dir) %>%
mutate(
fun_nm = str_extract_all(
doc,
pattern = regex(".*(\n\')([^ ]+)(\'\n).*", multiline = F, dotall = F)
),
fun_nm = str_replace_all(fun_nm, fixed("#'\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("'\n"), "")
)
dplyr::select(src_nm, 2, 1)
}
file_dir <- "./data-raw/tst_in/biomass.CTFSdb.R"
# code_from <- "./data-raw/ctfs_src_html/"
# doc_from <- "./data-raw/ctfs_doc/"
map_df(path_in, tibble_fun_nm)[[1]]
library(readr)
library(stringr)
library(purrr)
library(tibble)
library(dplyr)
library(tidyr)
base_in <- "./data-raw/tst_in/"
base_out <- "./data-raw/tst_out/"
path_in <- map2(base_in, dir(base_in), paste0)
path_out <- map2(base_out, dir(base_in), paste0)
tibble_doc <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_replace_all(
pattern = regex("(\n\')([^ ]+)(\'\n)", multiline = F, dotall = F),
replacement = "\\1\\2\\3\nxxxxx\n"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
tibble_fun_nm <- function(file_dir) {
src_nm <- tibble_doc(file_dir) %>%
mutate(
fun_nm = str_extract_all(
doc,
pattern = regex(".*(\n\')([^ ]+)(\'\n).*", multiline = F, dotall = F)
),
fun_nm = str_replace_all(fun_nm, fixed("#'\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("'\n"), "")
)
dplyr::select(src_nm, 2, 1)
}
file_dir <- "./data-raw/tst_in/biomass.CTFSdb.R"
# code_from <- "./data-raw/ctfs_src_html/"
# doc_from <- "./data-raw/ctfs_doc/"
map_df(path_in, tibble_fun_nm)[[1]]
source('C:/Users/dora/Dropbox/git_repos/ctfs/data-raw/tst_try.R', echo=TRUE)
library(readr)
library(stringr)
library(purrr)
library(tibble)
library(dplyr)
library(tidyr)
base_in <- "./data-raw/tst_in/"
base_out <- "./data-raw/tst_out/"
path_in <- map2(base_in, dir(base_in), paste0)
path_out <- map2(base_out, dir(base_in), paste0)
tibble_doc <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_replace_all(
pattern = regex("(\n\')([^ ]+)(\'\n)", multiline = F, dotall = F),
replacement = "\\1\\2\\3\nxxxxx\n"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
tibble_fun_nm <- function(file_dir) {
src_nm <- tibble_doc(file_dir) %>%
mutate(
fun_nm = str_extract_all(
doc,
pattern = regex(".*(\n\')([^ ]+)(\'\n).*", multiline = F, dotall = F)
),
fun_nm = str_replace_all(fun_nm, fixed("#'\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("'\n"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n"), ""),
)
dplyr::select(src_nm, 2, 1)
}
file_dir <- "./data-raw/tst_in/biomass.CTFSdb.R"
# code_from <- "./data-raw/ctfs_src_html/"
# doc_from <- "./data-raw/ctfs_doc/"
map_df(path_in, tibble_fun_nm)[[1]]
library(readr)
library(stringr)
library(purrr)
library(tibble)
library(dplyr)
library(tidyr)
base_in <- "./data-raw/tst_in/"
base_out <- "./data-raw/tst_out/"
path_in <- map2(base_in, dir(base_in), paste0)
path_out <- map2(base_out, dir(base_in), paste0)
tibble_doc <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_replace_all(
pattern = regex("(\n\')([^ ]+)(\'\n)", multiline = F, dotall = F),
replacement = "\\1\\2\\3\nxxxxx\n"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
tibble_fun_nm <- function(file_dir) {
src_nm <- tibble_doc(file_dir) %>%
mutate(
fun_nm = str_extract_all(
doc,
pattern = regex(".*(\n\')([^ ]+)(\'\n).*", multiline = F, dotall = F)
),
fun_nm = str_replace_all(fun_nm, fixed("#'\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("'\n"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n"), "")
)
dplyr::select(src_nm, 2, 1)
}
file_dir <- "./data-raw/tst_in/biomass.CTFSdb.R"
# code_from <- "./data-raw/ctfs_src_html/"
# doc_from <- "./data-raw/ctfs_doc/"
map_df(path_in, tibble_fun_nm)[[1]]
library(readr)
library(stringr)
library(purrr)
library(tibble)
library(dplyr)
library(tidyr)
base_in <- "./data-raw/tst_in/"
base_out <- "./data-raw/tst_out/"
path_in <- map2(base_in, dir(base_in), paste0)
path_out <- map2(base_out, dir(base_in), paste0)
tibble_doc <- function(file_dir) {
file_dir %>%
readr::read_file() %>%
str_replace_all(
pattern = regex("(\n\')([^ ]+)(\'\n)", multiline = F, dotall = F),
replacement = "\\1\\2\\3\nxxxxx\n"
) %>%
str_split("xxxxx") %>%
unlist() %>%
tibble() %>%
setNames("doc") %>%
# Remove empty rows
filter(grepl(".*[a-zA-Z]+.*", doc))
}
tibble_fun_nm <- function(file_dir) {
src_nm <- tibble_doc(file_dir) %>%
mutate(
fun_nm = str_extract_all(
doc,
pattern = regex(".*(\n\')([^ ]+)(\'\n).*", multiline = F, dotall = F)
),
fun_nm = str_replace_all(fun_nm, fixed("#'\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n'"), ""),
fun_nm = str_replace_all(fun_nm, fixed("'\n"), ""),
fun_nm = str_replace_all(fun_nm, fixed("\n"), ""),
fun_nm = str_replace_all(fun_nm, fixed("#"), "")
)
dplyr::select(src_nm, 2, 1)
}
file_dir <- "./data-raw/tst_in/biomass.CTFSdb.R"
# code_from <- "./data-raw/ctfs_src_html/"
# doc_from <- "./data-raw/ctfs_doc/"
map_df(path_in, tibble_fun_nm)[[1]]
map_df(path_in =  "./data-raw/ctfs_doc/", tibble_fun_nm)[[1]]
