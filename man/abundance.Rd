% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abundance.R
\name{abundance}
\alias{abundance}
\alias{abundance}
\alias{add_abundance}
\alias{count_duplicated}
\title{Count individuals in total or by groups (abundance, richness, singletons).}
\usage{
abundance(x, ..., wt = NULL, sort = FALSE)

add_abundance(x, ..., wt = NULL, sort = FALSE)

count_duplicated(x, ..., wt = NULL, sort = FALSE)
}
\arguments{
\item{x}{A dataframe.}

\item{...}{Variables to group by.}

\item{wt}{(Optional) If omitted (and no variable named \code{n} exists in the
data), will count the number of rows.
If specified, will perform a "weighted" tally by summing the
(non-missing) values of variable \code{wt}. A column named \code{n} (but not \code{nn} or
\code{nnn}) will be used as weighting variable by default in \code{tally()}, but not
in \code{count()}. This argument is automatically \link[rlang:quo]{quoted} and later
\link[rlang:eval_tidy]{evaluated} in the context of the data
frame. It supports \link[rlang:quasiquotation]{unquoting}. See
\code{vignette("programming")} for an introduction to these concepts.}

\item{sort}{if \code{TRUE} will sort output in descending order of \code{n}}
}
\value{
A dataframe.
}
\description{
These functions help you to count rows in a dataframe:
\itemize{
\item \code{abundance()} is an identical copy of \code{dplyr::count()}, and
\code{add_abundance()} is an identical copy of \code{dplyr::add_count()}.
\item \code{count_duplicated} helps you count duplicated observations of a variable.
It is a shortcut for \code{dplyr::filter(dplyr::count(x, ...) > 1)}).
\item Also reexported from \strong{dplyr} are \code{tally()} and \code{add_tally()}. For details
see \code{\link[dplyr:count]{dplyr::count()}}.
}
}
\details{
The issue of calculating the abundance of individuals in a sample is a
particular case of counting observations in general. By counting individuals
you can also calculate richness, find singletons, or duplicated observations
of a variable. The examples below show how the most commonly used functions
may be applied to ForestGEO data. To learn more about these functions, and to
see more general examples see \code{?dplyr::count()}.

All of these functions quote some argument to make interactive use easier.
This mean that you can refer to columns of the data directly by their bare
name (not using "quotes"). If you want to use them inside your own functions
you should learn about tidy eval (implemented via the \strong{rlang} package). A
good place to start is at \strong{dplyr}'s website.
}
\section{Acknowledgments}{

Thanks to David Kenfack for sharing ideas that helped improve these
functions.
}

\examples{
# Example data
census <- tibble::tibble(
  stemID = 1:6,
  quadrat = paste0("000", rep(1:2, each = 3)),
  sp = c(paste0("sp", c(1, 1, 2)), paste0("sp", c(3, 3, 3))),
  dbh = abs(sample(rnorm(100), 6) * 10)
)
census

# Abundance (rows count) by quadrat
abundance(census, quadrat)
# Identical
count(census, quadrat)

# Abundance (rows count) by quadrat by species
abundance(census, quadrat, sp)

# Richness by quadrat:
# Count is designed so that you can call it repeatedly, each time rolling up
# a level of detail.
# Now, each row by quadrat is a unique species, so counting rows gives
# richness
n_quad_sp <- abundance(census, quadrat, sp)
richness_quad <- abundance(n_quad_sp, quadrat)
richness_quad

# Singleton:
# add_abundance() is useful for groupwise filtering e.g.: show only species 
# that have a single member
out <- add_abundance(census, quadrat, sp)
# Identical
out <- add_count(census, quadrat, sp)
subset(out, n == 1)
# Or the complement
subset(out, n > 1)

# A shortcut to find duplicates that drops irrelevant columns:
count_duplicated(census, quadrat, sp)
# Any duplicated stemID?
count_duplicated(census, stemID)
}
\seealso{
\code{\link[dplyr:count]{dplyr::count()}}.
}
