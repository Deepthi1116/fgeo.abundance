% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abundance.R
\name{abundance}
\alias{abundance}
\alias{abundance_tally}
\title{Count number of individuals in total or by groups.}
\usage{
abundance(x, group_by = c("quadrat", "sp"), only_alive = TRUE)

abundance_tally(x, only_alive = TRUE)
}
\arguments{
\item{x}{Census data.}

\item{group_by}{Character string giving the names of variables to group by.}

\item{only_alive}{If TRUE, counts only alive individuals (`status == "A"`).
If FALSE counts individuals of all available statuses.}
}
\value{
\itemize{
\item \code{abundance_tally()}: An integer giving the number of rows in \code{x}, which
for census data equals the number of unique individuals.
\item \code{abundance()}: a data frame giving the number of individuals in each
group defined by \code{group_by}.
}
}
\description{
Count number of individuals in total (\code{abundance_tally()}) or by groups
(\code{abundance()}).
}
\examples{
stem <- bci12s7mini

# Returns a data frame by groups
n <- abundance(stem)
head(n)

# Instead of a data frame, return an integer representing a tally
abundance_tally(stem)

# Count not only alive
n <- abundance(stem, group_by = c("status", "sp"), only_alive = FALSE)
ordered_by_species <- order(n$sp)
head(n[ordered_by_species, ])



# ALTERNATIVES

library(dplyr)

alive <- filter(stem, status == "A")

grouped <- group_by(alive, quadrat, sp)
summarise(grouped, n = n())

# Or
count(alive, quadrat, sp)
}
\seealso{
\code{\link[dplyr:tally]{dplyr::tally()}}, \code{\link[dplyr:count]{dplyr::count()}}.

Other grouped summaries: \code{\link{basal_area}}
}
\author{
Gabriel Arellano, Sean McMahon & Mauro Lepore.
}
