% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abundance_.R
\name{n_d_plyr}
\alias{n_d_plyr}
\alias{n_dplyr}
\alias{n_dplyr_se}
\alias{n_plyr}
\title{These functions are alternatives which source code use \strong{dplyr} or \strong{plyr}.}
\usage{
n_dplyr(x, ..., only_alive = TRUE)

n_dplyr_se(x, groups = c("status", "sp"), only_alive = TRUE)

n_plyr(x, groups = c("sp", "status"), only_alive = TRUE, ...)
}
\arguments{
\item{x}{Census.}

\item{...}{Bare names of variables to group by.}

\item{only_alive}{If TRUE, filter only alive individuals.}

\item{groups}{Character string giving the names of variables to group by.}
}
\value{
Tally if groups = NULL, else, a count by group.
}
\description{
Compared to using \strong{base} exclusively, these functions may be a little more
friendly for users, but maybe harder for developers to understand and
maintain. \strong{dplyr} evolves very rapidly and therefore some functions that
are recommended today may be deprecated later. Yet, the source code is
available so it is always possible to re-use it into \strong{forestr}.
}
\details{
\itemize{
\item Grouping with a character string
\itemize{
\item \code{\link[=n_dplyr_se]{n_dplyr_se()}} uses latest tidy eval approach.
\item \code{\link[=n_plyr]{n_plyr()}} uses plyr (deprecated).
}
\item Grouping with bare variable names:
\itemize{
\item \code{\link[=n_dplyr]{n_dplyr()}} uses the latest "tidy eval" approach.
}
}
}
\examples{
library(dplyr)

stem <- bci12s7mini

# Giving grouping variables in a character string  -----------------------

# USING DPLYR (IF NEW TO DPLYR, THE SOURCE CODE MAY BE HARDER TO UNDERSTAND)

# Standard evaluation using the newest (tidy eval) approach.

n_dplyr_se(stem)

# Same:
n_dplyr_se(stem, groups = c("status", "sp"))

# NULL groups result in a tally.
n_dplyr_se(stem, groups = NULL)

# Count not only alive
n <- n_dplyr_se(stem, groups = c("status", "sp"), only_alive = FALSE)
arrange(n, sp)



# INSTEAD OF DPLYR, USING PLYR (DEPRECATED, AND SLOWER THAN BASE AND DPLYR)

# Using plyr, the deprecated ancestor of dplyr

head(n_plyr(stem))

head(n_plyr(stem), groups = c("quadrat", "sp"), only_alive = FALSE)

df <- data.frame(
  id = 1:6,
  sp = letters[c(1, 2, 2, 3, 3, 3)],
  status = rep(c("A", "D"), each = 3),
  stringsAsFactors = FALSE
)
df

# The same ----

dplyr::count(df, sp, status)

grouped <- dplyr::group_by(df, sp, status) 
dplyr::summarise(grouped, n = n())

tibble::as_tibble(
  n_plyr(df, c("sp", "status"), only_alive = FALSE)
)

# Giving grouping variables as bare names --------------------------------

# dplyr defaults to using bare variable names. 

n_dplyr(stem)

n_dplyr(stem, sp, only_alive = FALSE)

}
